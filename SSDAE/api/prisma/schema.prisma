generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:popohq14@localhost:5432/postgres"
}

model alumnos {
  id_alumno   Int      @id @default(autoincrement())
  estatus     String   @db.VarChar
  ano_ingreso Int      @default(autoincrement())
  ciclo       String   @db.VarChar
  usuarios    usuarios @relation(fields: [id_alumno], references: [id_usuario], onDelete: Cascade)
  tesis       tesis[]
}

model profesores {
  id_profesor     Int          @id @default(autoincrement())
  interno_externo String       @db.VarChar
  usuarios        usuarios     @relation(fields: [id_profesor], references: [id_usuario], onDelete: Cascade)
  prof_tesis      prof_tesis[]
}

model usuarios {
  id_usuario     Int              @id @default(autoincrement())
  correo         String           @unique @db.VarChar
  contrasena     String           @db.VarChar
  tipo_usuario   String           @db.VarChar
  nombre         String           @db.VarChar
  ap_p           String           @db.VarChar
  ap_m           String           @db.VarChar
  alumnos        alumnos?
  profesores     profesores?
  recuperaciones recuperaciones[]
}

model recuperaciones {
  id_recuperacion  Int       @id @default(autoincrement())
  correo           String?   @db.VarChar
  token            String    @db.VarChar
  fecha_expiracion DateTime  @db.Date
  usuarios         usuarios? @relation(fields: [correo], references: [correo], onDelete: Cascade)
}

model tesis {
  id_tesis    Int          @id @default(autoincrement())
  tema        String       @db.VarChar
  id_alumno   Int          @default(autoincrement())
  descripcion String       @db.VarChar
  alumnos     alumnos      @relation(fields: [id_alumno], references: [id_alumno], onDelete: Cascade)
  avances     avances[]
  prof_tesis  prof_tesis[]
}

model prof_tesis {
  id_profesor Int        @default(autoincrement())
  id_tesis    Int        @default(autoincrement())
  rol         String     @db.VarChar
  profesores  profesores @relation(fields: [id_profesor], references: [id_profesor], onDelete: Cascade)
  tesis       tesis      @relation(fields: [id_tesis], references: [id_tesis], onDelete: Cascade)

  @@id([id_profesor, id_tesis], map: "prof_tesis_primarykey")
}

model avances {
  numero_avance Int    @default(autoincrement())
  id_tesis      Int    @default(autoincrement())
  doc           String @db.VarChar
  revisado      String @db.VarChar
  tesis         tesis  @relation(fields: [id_tesis], references: [id_tesis], onDelete: Cascade)

  @@id([numero_avance, id_tesis], map: "numero_avance_id_tesis")
}
